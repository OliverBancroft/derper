name: Build DERPER

on:
  push:
    branches: [main]
    tags:
      - "v*.*.*" # 匹配版本标签
  workflow_dispatch:
    inputs:
      release:
        description: "Create Release"
        required: true
        type: boolean
        default: false

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取所有历史记录用于版本信息

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Build DERPER
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p build
          go get tailscale.com/cmd/derper@latest

          # 获取版本信息
          VERSION=$(git describe --tags --always)
          BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S')

          if [ "${{ matrix.goos }}" = "windows" ]; then
            OUTPUT="build/derper-${{ matrix.goos }}-${{ matrix.goarch }}.exe"
          else
            OUTPUT="build/derper-${{ matrix.goos }}-${{ matrix.goarch }}"
          fi

          # 构建带版本信息的二进制
          go build -o $OUTPUT \
            -ldflags "-X main.version=${VERSION} -X main.buildTime=${BUILD_TIME}" \
            tailscale.com/cmd/derper

          ls -la build/
          file build/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: derper-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/derper-*
          retention-days: 5 # 设置保留时间

    outputs:
      version: ${{ steps.get_version.outputs.version }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.release == 'true'

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: List files
        run: ls -R dist/

      - name: Generate Release Notes
        run: |
          echo "# DERP Server Binary Release" > RELEASE_NOTES.md
          echo "## Builds included:" >> RELEASE_NOTES.md
          echo "- Linux (amd64, arm64)" >> RELEASE_NOTES.md
          echo "- macOS (amd64, arm64)" >> RELEASE_NOTES.md
          echo "- Windows (amd64)" >> RELEASE_NOTES.md
          echo "## Installation" >> RELEASE_NOTES.md
          echo '```bash' >> RELEASE_NOTES.md
          echo "# Linux/macOS" >> RELEASE_NOTES.md
          echo "chmod +x derper-linux-amd64" >> RELEASE_NOTES.md
          echo "sudo mv derper-linux-amd64 /usr/local/bin/derper" >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/**/*
          body_path: RELEASE_NOTES.md
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
